define({
  "name": "Coinone API Documentation",
  "version": "0.1.10",
  "description": "Coinone API documentations",
  "title": "Coinone API Documentation",
  "header": {
    "title": "API Info",
    "content": "<h1>URL</h1>\n<p><code>https://api.coinone.co.kr/</code></p>\n<hr>\n<h1>About Public API</h1>\n<ul>\n<li>Public information.</li>\n</ul>\n<h3>HTTP Method</h3>\n<ul>\n<li>GET Method</li>\n</ul>\n<h3>Rate Limit</h3>\n<ul>\n<li>300 requests per minute</li>\n</ul>\n<p><code>If you make more requests than the above notice, you will be blocked for 10 minutes.</code></p>\n<pre><code class=\"language-python\">{\n    &quot;result&quot;: &quot;error&quot;,\n    &quot;errorCode&quot;: &quot;4&quot;,\n    &quot;errorMsg&quot;: &quot;Blocked user access.&quot;\n}\n</code></pre>\n<hr>\n<h1>About Private API</h1>\n<ul>\n<li>Account API</li>\n<li>Order API</li>\n<li>Transaction API</li>\n</ul>\n<h3>Rate Limit</h3>\n<ul>\n<li>10 requests per second</li>\n</ul>\n<p><code>If you make more requests than the above notice, you will be blocked for 10 minutes.</code></p>\n<pre><code class=\"language-python\">{\n    &quot;result&quot;: &quot;error&quot;,\n    &quot;errorCode&quot;: &quot;4&quot;,\n    &quot;errorMsg&quot;: &quot;Blocked user access.&quot;\n}\n</code></pre>\n<h1>V1 version</h1>\n<p>V1 API needs V1 version of <em>ACCESS TOKEN</em>.\nTo generate the key, go to the <a href=\"https://coinone.co.kr/developer/app/\">API Page</a>.</p>\n<h3>HTTP Method</h3>\n<ul>\n<li>POST and GET Method</li>\n</ul>\n<h1>V2 version</h1>\n<p>V2 API needs V2 version of <em>ACCESS TOKEN</em> and <em>SECRET KEY</em>.\nTo generate keys, go to the <a href=\"https://coinone.co.kr/developer/app/\">API Page</a>.<br>\n<strong>APP SECRET and SECRET KEY are <em>SAME</em></strong> at App API.\nETH and ETC APIs are only supported in V2.</p>\n<h3>Nonce</h3>\n<p>Nonce is positive integer like unix timestamp.\nTo prevent <a href=\"https://en.wikipedia.org/wiki/Replay_attack\">replay attack</a>, user needs to provide the nonce which is increased for each request.</p>\n<h3>HTTP Method</h3>\n<ul>\n<li>POST Method</li>\n</ul>\n<h3>HTTP Content-Type</h3>\n<ul>\n<li>application/json</li>\n</ul>\n<h3>HTTP Header</h3>\n<ul>\n<li>X-COINONE-PAYLOAD</li>\n<li>X-COINONE-SIGNATURE</li>\n</ul>\n<h3>Generate X-COINONE-PAYLOAD</h3>\n<p><code>PAYLOAD = BASE64(JSON(body))</code></p>\n<p>Create JSON string from a parameter object(include a nonce value).</p>\n<pre><code class=\"language-python\">import simplejson as json\nimport time\n\nparam = {\n  'access_token': ACCESS_TOKEN,\n  'price': 500000,\n  'qty': 1.1234\n  'nonce': int(time.time()*1000)\n}\n\n#to json\njson_param = json.dumps(param)\n</code></pre>\n<p>Encode JSON string by base64 that is X-COINONE-PAYLOAD.</p>\n<pre><code class=\"language-python\">import base64\n\n#X-COINONE-PAYLOAD\npayload = base64.b64encode(json_param)\n</code></pre>\n<h3>Generate X-COINONE-SIGNATURE</h3>\n<p><strong><em>SECRET KEY must be upper case.</em></strong></p>\n<p><code>SIGNATURE = HMAC-SHA512(payload, secret_key.upper()).TO_HEX_DIGEST()</code></p>\n<pre><code class=\"language-python\">import hashlib\nimport hmac\n\n#X-COINONE-SIGNATURE\nsignature = hmac.new(str(SECRET_KEY).upper(), str(PAYLOAD), hashlib.sha512).hexdigest();\n</code></pre>\n<h3>HTTP Request</h3>\n<p>Request body be equal to X-COINONE-PAYLOAD</p>\n<pre><code class=\"language-python\">response = client.post(URL,\n    format='json',\n    data=X-COINONE-PAYLOAD,\n    **{\n      'X-COINONE-PAYLOAD': X-COINONE-PAYLOAD,\n      'X-COINONE-SIGNATURE': get_signature(X-COINONE-PAYLOAD, SECRET_KEY)\n    })\n</code></pre>\n<h3>Example : Get balance</h3>\n<pre><code class=\"language-python\">import simplejson as json\nimport time\nimport base64\nimport hashlib\nimport hmac\n\nACCESS_TOKEN = ''\nSECRET_KEY = ''\n\ndef get_encoded_payload(payload):\n  #add nonce\n  payload[u'nonce'] = int(time.time()*1000)\n\n  dumped_json = json.dumps(payload)\n  encoded_json = base64.b64encode(dumped_json)\n  return encoded_json\n\ndef get_signature(encoded_payload, secret_key):\n  signature = hmac.new(str(secret_key).upper(), str(encoded_payload), hashlib.sha512);\n  return signature.hexdigest()\n\ndef get_response(url, payload):\n  encoded_payload = get_encoded_payload(payload)\n  response = client.post(APIURL + url,\n    format='json',\n    data=encoded_payload,\n    **{\n      'X-COINONE-PAYLOAD': encoded_payload,\n      'X-COINONE-SIGNATURE': get_signature(encoded_payload, SECRET_KEY)\n    })\n  return response\n\ndef get_balance():\n  url = '/balance'\n  payload = {\n    'access_token': ACCESS_TOKEN,\n  }\n\n  response = get_response(url, payload)\n  content = json.loads(response.content)\n\n  return content\n\nif __name__   == &quot;__main__&quot;:\n    print get_balance()\n</code></pre>\n"
  },
  "sampleUrl": false,
  "defaultVersion": "0.0.0",
  "apidoc": "0.3.0",
  "generator": {
    "name": "apidoc",
    "time": "2018-10-30T09:34:57.452Z",
    "url": "http://apidocjs.com",
    "version": "0.17.6"
  }
});
